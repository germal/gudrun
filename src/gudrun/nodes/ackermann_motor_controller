#!/usr/bin/env python
from __future__ import print_function
import rospy, math, time
from ackermann_msgs.msg import AckermannDriveStamped
from std_msgs.msg import Float32
from geometry_msgs.msg import TwistWithCovarianceStamped

from simple_pid import PID

from gudrun.motor import Car, Smoother

class AckermannMotorController(object):

    def __init__(self, PID_update_rate=20):
        rospy.init_node('ackermann_motor_controller')
        rospy.loginfo('Started ackermann_motor_controller')

        self.car = Car()
        self._command = 0

        rospy.Subscriber('ackermann_cmd', AckermannDriveStamped, self.callback)
        rospy.Subscriber('motor_encoder/velocity', Float32, self._son_do_you_know_how_fast_you_were_going)
        self.cp_publisher = rospy.Publisher('speed_control/proportional', Float32, queue_size=10)
        self.ci_publisher = rospy.Publisher('speed_control/integral', Float32, queue_size=10)
        self.cd_publisher = rospy.Publisher('speed_control/derivative', Float32, queue_size=10)
        self.sp_publisher = rospy.Publisher('speed_control/setpoint', Float32, queue_size=10)
        self.pv_publisher = rospy.Publisher('speed_control/measured', Float32, queue_size=10)
        self.cv_publisher = rospy.Publisher('speed_control/control', Float32, queue_size=10)
        self.th_publisher = rospy.Publisher('speed_control/throttle', Float32, queue_size=10)
        self.ce_publisher = rospy.Publisher('speed_control/error', Float32, queue_size=10)
        self.st_publisher = rospy.Publisher('steering_smoothed', Float32, queue_size=10)
        self._velocity = 0

        # Set the PID's "sample_time" to smaller than our own likely update speed,
        # so we will compute a new control value every call.
        self.update_pid_params()
        import warnings
        with warnings.catch_warnings():
            warnings.filterwarnings('ignore', category=DeprecationWarning)
            self.pid = PID(self.Kp, self.Ki, self.Kd, setpoint=0, sample_time=None, proportional_on_measurement=False)


        self.input_velocity_smoother = Smoother(rospy.get_param('~speed_measurment_smoothing_window', 1))

        self.command_steering_smoother = Smoother(rospy.get_param('~steering_smoother_queue_length', 10))
        self.last_steering_command = 0
        self.ANGLE_SCALING = rospy.get_param('~angle_scaling')

        self.PID_update_timer = rospy.Rate(PID_update_rate)
        self._cps = self._velocity = 0

        self.odometry_message = TwistWithCovarianceStamped()
        
        # Static covariance.
        # Row-major representation of the 6x6 covariance matrix
        # The orientation parameters use a fixed-axis representation.
        # In order, the parameters are:
        # (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
        diagonal = [.05, .02, .02,   .02, .02, .15]
        for r, v in enumerate(diagonal):
            self.odometry_message.twist.covariance[r + r * len(diagonal)] = v

        self.odometry_publisher = rospy.Publisher('controller_odom/twist_actual', TwistWithCovarianceStamped, queue_size=5)
        self.WHEELBASE = rospy.get_param('~wheelbase')

        self.timeout_threshold = rospy.get_param('~zero_command_timeout', 0.5)
        self._last_nonzero_command_time = time.time() - self.timeout_threshold * 1.1

        self.initialized = True

        self.loop()

    def update_pid_params(self):
        """Enable simple runtime-reconfigure with `rosparam set`."""
        changed = {}
        for which in 'pid':
            old = getattr(self, 'K%s' % which, None)
            new = rospy.get_param('~K%s' % which)
            changed[which] = old != new
            setattr(self, 'K%s' % which, new)
            
        if hasattr(self, 'pid'):
            for which in 'pid':
                key = 'K%s' % which
                if changed[which]:
                    print(key, 'reconfigured; updating')
                    setattr(self.pid, key, getattr(self, key))
                    print(' tunings are now', self.pid.tunings)
            
    def callback(self, message):
        self._command = message.drive.speed
        steering = message.drive.steering_angle
        if not self._forward:
            # TODO: Handle this in from the path planning side, if possible, maybe.
            steering *= -1
        self.set_steering(steering)
        self.set_velocity_target(message.drive.speed)

        # I'm ignoring, for now, all the velocity/acceleration/jerk parts of the message.
        # It should be noted that the Mini Maestro servo controller does have options for
        # acceleration (and jerk?) limiting that should be considered, though they might
        # need to be translated from [m/s/s...] to [motor encoder count/s] terms.

    @property
    def _forward(self):
        return self._command >= 0

    def set_velocity_target(self, velocity_target):
        vt = velocity_target

        MIN_NONZERO_SPEED = rospy.get_param('~min_nonzero_speed', .1)

        if vt != 0:
            s = -1 if vt < 0 else 1
            vt = s * max(abs(vt), MIN_NONZERO_SPEED)

        self.pid.setpoint = vt

    def set_steering_regular(self, angle):
        # Calibration "curve" is a simple multiplier.
        # Since "car" takes positive to be right turn, we flip the sign.

        fraction = -angle * self.ANGLE_SCALING
        self.car.steering = fraction

    def set_steering(self, angle):
        self.last_steering_command = angle

    def publish_odometry(self):
        v = self._velocity

        angle = -self.car.steering / self.ANGLE_SCALING
        if self._velocity == 0 or angle == 0:
            omega = 0
        else:
            # angle = math.atan(wheelbase / radius)
            radius = self.WHEELBASE / math.tan(angle)
            omega = v / radius

        msg = self.odometry_message
        twist = msg.twist.twist
        twist.angular.z = omega
        twist.linear.x = v
        msg.header.stamp = rospy.Time.now()
        self.odometry_publisher.publish(msg)

    def _son_do_you_know_how_fast_you_were_going(self, msg):
        if not getattr(self, 'initialized', False):
            return None

        if self.input_velocity_smoother.maxlen == 1:
            self._velocity = msg.data
        else:
            self._velocity = self.input_velocity_smoother(msg.data)
        self.publish_odometry()

    def loop(self):
        while not rospy.is_shutdown():
            self.update_pid_steering()
            try:
                self.update_pid_params()
                self.PID_update_timer.sleep()
            except rospy.ROSInterruptException:
                print('Caught interrupt in ackermann_motor_controller!')
                break

        if rospy.is_shutdown():
            print('Caught shutdown signal in ackermann_motor_controller!')

    def update_pid_steering(self):
        MIN_MOTOR = rospy.get_param('~min_abs_pseudovelocity', .01)
        command = self._command
        control = self.pid(self._velocity)

        
        t = time.time()
        dt = t - self._last_nonzero_command_time
        if command == 0 and dt > self.timeout_threshold:
            control = 0
            # Reset the integral term when stopping.
            self.pid._integral = 0

        # Ensure the controller doesn't fall to zero (and brake the motor)
        # just because we're overspeeding.
        else:
            if command != 0: self._last_nonzero_command_time = t
            if command > 0:
                control = max(control, MIN_MOTOR)
            else:
                control = min(control, -MIN_MOTOR)

        cp, ci, cd = self.pid.components
        throttle = self.pseudovelocity_to_throttle(control)
        self.car.throttle = throttle

        smoothed_steering_command = self.command_steering_smoother(self.last_steering_command)
        if smoothed_steering_command == 0 and abs(self.car.steering) > .01:
            self.command_steering_smoother.clear()

        self.set_steering_regular(smoothed_steering_command)

        self.st_publisher.publish(smoothed_steering_command)
        self.cp_publisher.publish(cp)
        self.ci_publisher.publish(ci)
        self.cd_publisher.publish(cd)
        self.sp_publisher.publish(self.pid.setpoint)
        self.pv_publisher.publish(self._velocity)
        self.cv_publisher.publish(control)
        self.th_publisher.publish(throttle)
        self.ce_publisher.publish(self._velocity - command)


    @staticmethod
    def pseudovelocity_to_throttle(pseudovelocity):
        # Calibration curve for speed=y from throttle=x
        # is given as two lines,
        # one for forward-driving, and one for reverse.
        #y - 0 = m * (x - xb)
        #x = y / m + xb

        m_reverse = rospy.get_param('~pseudovelocity_rate_scaling', 1.0)
        xb_reverse = -rospy.get_param('~min_abs_throttle', 1.0)
        m_forward = rospy.get_param('~pseudovelocity_rate_scaling', 1.0)
        xb_forward = rospy.get_param('~min_abs_throttle', 1.0)
        if pseudovelocity == 0:
            return 0

        elif pseudovelocity < 0:
            return pseudovelocity / m_reverse + xb_reverse

        else:
            return pseudovelocity / m_forward + xb_forward


if __name__ == '__main__':
    AckermannMotorController()
